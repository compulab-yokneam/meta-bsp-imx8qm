From b8edcd167dfa1b0bbdcecfa26d0c58696a1ec9ea Mon Sep 17 00:00:00 2001
From: Ilya Ledvich <ilya@compulab.co.il>
Date: Wed, 3 Mar 2021 11:43:06 +0200
Subject: [PATCH 2/3] cl-som-imx8max: add default environment

Add default u-boot environment to conform Compulab requirements.
Cleanup board config file.

Signed-off-by: Ilya Ledvich <ilya@compulab.co.il>
---
 include/configs/cl-som-imx8max.h | 272 ++++++++++---------------------
 1 file changed, 87 insertions(+), 185 deletions(-)

diff --git a/include/configs/cl-som-imx8max.h b/include/configs/cl-som-imx8max.h
index bc5b385c4e..3dd64eabab 100644
--- a/include/configs/cl-som-imx8max.h
+++ b/include/configs/cl-som-imx8max.h
@@ -14,7 +14,7 @@
 #define CONFIG_SPL_MAX_SIZE				(192 * 1024)
 #define CONFIG_SYS_MONITOR_LEN				(1024 * 1024)
 #define CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_USE_SECTOR
-#define CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR                0x1040 /* (flash.bin_offset + 2Mb)/sector_size */
+#define CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR		0x1040 /* (flash.bin_offset + 2Mb)/sector_size */
 
 /*
  * 0x08081000 - 0x08180FFF is for m4_0 xip image,
@@ -22,16 +22,16 @@
   * So 3rd container image may start from 0x8281000
  */
 #define CONFIG_SYS_UBOOT_BASE 0x08281000
-#define CONFIG_SYS_MMCSD_FS_BOOT_PARTITION             0
+#define CONFIG_SYS_MMCSD_FS_BOOT_PARTITION		0
 
-#define CONFIG_SPL_LDSCRIPT		"arch/arm/cpu/armv8/u-boot-spl.lds"
-#define CONFIG_SPL_STACK		0x013fff0
-#define CONFIG_SPL_BSS_START_ADDR      0x00130000
-#define CONFIG_SPL_BSS_MAX_SIZE		0x1000	/* 4 KB */
-#define CONFIG_SYS_SPL_MALLOC_START	0x82200000
-#define CONFIG_SYS_SPL_MALLOC_SIZE     0x80000	/* 512 KB */
-#define CONFIG_SERIAL_LPUART_BASE	0x5a060000
-#define CONFIG_MALLOC_F_ADDR		0x00138000
+#define CONFIG_SPL_LDSCRIPT				"arch/arm/cpu/armv8/u-boot-spl.lds"
+#define CONFIG_SPL_STACK				0x013fff0
+#define CONFIG_SPL_BSS_START_ADDR			0x00130000
+#define CONFIG_SPL_BSS_MAX_SIZE				0x1000	/* 4 KB */
+#define CONFIG_SYS_SPL_MALLOC_START			0x82200000
+#define CONFIG_SYS_SPL_MALLOC_SIZE			0x80000	/* 512 KB */
+#define CONFIG_SERIAL_LPUART_BASE			0x5a060000
+#define CONFIG_MALLOC_F_ADDR				0x00138000
 
 #define CONFIG_SPL_RAW_IMAGE_ARM_TRUSTED_FIRMWARE
 
@@ -55,10 +55,10 @@
 
 #undef CONFIG_CMD_CRC32
 
-#define CONFIG_SYS_FSL_ESDHC_ADDR       0
-#define USDHC1_BASE_ADDR                0x5B010000
-#define USDHC2_BASE_ADDR                0x5B020000
-#define USDHC3_BASE_ADDR                0x5B030000
+#define CONFIG_SYS_FSL_ESDHC_ADDR			0
+#define USDHC1_BASE_ADDR				0x5B010000
+#define USDHC2_BASE_ADDR				0x5B020000
+#define USDHC3_BASE_ADDR				0x5B030000
 
 #define CONFIG_ENV_OVERWRITE
 
@@ -68,21 +68,21 @@
 
 #define CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG
 
-#define CONFIG_FEC_XCV_TYPE             RGMII
+#define CONFIG_FEC_XCV_TYPE				RGMII
 #define FEC_QUIRK_ENET_MAC
-#define PHY_ANEG_TIMEOUT 20000
+#define PHY_ANEG_TIMEOUT				20000
 
 /* ENET0 connects AR8031 on CPU board, ENET1 connects to base board */
 #define CONFIG_FEC_ENET_DEV 0
 
 #if (CONFIG_FEC_ENET_DEV == 0)
-#define IMX_FEC_BASE			0x5B040000
-#define CONFIG_FEC_MXC_PHYADDR          0x0
-#define CONFIG_ETHPRIME                 "eth0"
+#define IMX_FEC_BASE					0x5B040000
+#define CONFIG_FEC_MXC_PHYADDR				 0x0
+#define CONFIG_ETHPRIME					"eth0"
 #elif (CONFIG_FEC_ENET_DEV == 1)
-#define IMX_FEC_BASE			0x5B050000
-#define CONFIG_FEC_MXC_PHYADDR          0x1
-#define CONFIG_ETHPRIME                 "eth1"
+#define IMX_FEC_BASE					0x5B050000
+#define CONFIG_FEC_MXC_PHYADDR				0x1
+#define CONFIG_ETHPRIME					"eth1"
 #endif
 
 #ifdef CONFIG_AHAB_BOOT
@@ -91,67 +91,15 @@
 #define AHAB_ENV "sec_boot=no\0"
 #endif
 
-
-#define JAILHOUSE_ENV \
-	"jh_mmcboot=" \
-		"setenv fdt_file imx8qm-mek-root.dtb;"\
-		"setenv boot_os 'scu_rm dtb ${fdt_addr}; booti ${loadaddr} - ${fdt_addr};'; " \
-		"run mmcboot; \0" \
-	"jh_netboot=" \
-		"setenv fdt_file imx8qm-mek-root.dtb;"\
-		"setenv boot_os 'scu_rm dtb ${fdt_addr}; booti ${loadaddr} - ${fdt_addr};'; " \
-		"run netboot; \0"
-
-#define XEN_BOOT_ENV \
-	    "domu-android-auto=no\0" \
-            "xenhyper_bootargs=console=dtuart dom0_mem=2048M dom0_max_vcpus=2 dom0_vcpus_pin=true hmp-unsafe=true\0" \
-            "xenlinux_bootargs= \0" \
-            "xenlinux_console=hvc0 earlycon=xen\0" \
-            "xenlinux_addr=0x9e000000\0" \
-	    "dom0fdt_file=imx8qm-mek-dom0.dtb\0" \
-            "xenboot_common=" \
-                "${get_cmd} ${loadaddr} xen;" \
-                "${get_cmd} ${fdt_addr} ${dom0fdt_file};" \
-                "if ${get_cmd} ${hdp_addr} ${hdp_file}; then; hdp load ${hdp_addr}; fi;" \
-                "${get_cmd} ${xenlinux_addr} ${image};" \
-                "fdt addr ${fdt_addr};" \
-                "fdt resize 256;" \
-                "fdt set /chosen/module@0 reg <0x00000000 ${xenlinux_addr} 0x00000000 0x${filesize}>; " \
-                "fdt set /chosen/module@0 bootargs \"${bootargs} ${xenlinux_bootargs}\"; " \
-		"if test ${domu-android-auto} = yes; then; " \
-			"fdt set /domu/doma android-auto <1>;" \
-			"fdt rm /gpio@5d090000 power-domains;" \
-		"fi;" \
-                "setenv bootargs ${xenhyper_bootargs};" \
-                "booti ${loadaddr} - ${fdt_addr};" \
-            "\0" \
-            "xennetboot=" \
-                "setenv get_cmd dhcp;" \
-                "setenv console ${xenlinux_console};" \
-                "run netargs;" \
-                "run xenboot_common;" \
-            "\0" \
-            "xenmmcboot=" \
-                "setenv get_cmd \"fatload mmc ${mmcdev}:${mmcpart}\";" \
-                "setenv console ${xenlinux_console};" \
-                "run mmcargs;" \
-                "run xenboot_common;" \
-            "\0" \
 /* Boot M4 */
 #define M4_BOOT_ENV \
 	"m4_0_image=m4_0.bin\0" \
 	"m4_1_image=m4_1.bin\0" \
-	"loadm4image_0=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${m4_0_image}\0" \
-	"loadm4image_1=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${m4_1_image}\0" \
+	"loadm4image_0=load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${m4_0_image}\0" \
+	"loadm4image_1=load mmc ${mmcdev}:${mmcpart} ${loadaddr} ${m4_1_image}\0" \
 	"m4boot_0=run loadm4image_0; dcache flush; bootaux ${loadaddr} 0\0" \
 	"m4boot_1=run loadm4image_1; dcache flush; bootaux ${loadaddr} 1\0" \
 
-#ifdef CONFIG_NAND_BOOT
-#define MFG_NAND_PARTITION "mtdparts=gpmi-nand:128m(boot),32m(kernel),16m(dtb),8m(misc),-(rootfs) "
-#else
-#define MFG_NAND_PARTITION ""
-#endif
-
 #define CONFIG_MFG_ENV_SETTINGS \
 	CONFIG_MFG_ENV_SETTINGS_DEFAULT \
 	"initrd_addr=0x83100000\0" \
@@ -163,13 +111,13 @@
 #define CONFIG_EXTRA_ENV_SETTINGS		\
 	CONFIG_MFG_ENV_SETTINGS \
 	M4_BOOT_ENV \
-	XEN_BOOT_ENV \
-	JAILHOUSE_ENV\
 	AHAB_ENV \
+	"autoload=no\0" \
 	"script=boot.scr\0" \
 	"image=Image\0" \
 	"splashimage=0x9e000000\0" \
 	"console=ttyLP0\0" \
+	"earlycon=earlycon\0" \
 	"fdt_addr=0x83000000\0"			\
 	"fdt_high=0xffffffffffffffff\0"		\
 	"cntr_addr=0x98000000\0"			\
@@ -180,20 +128,28 @@
 	"mmcpart=" __stringify(CONFIG_SYS_MMC_IMG_LOAD_PART) "\0" \
 	"mmcroot=" CONFIG_MMCROOT " rootwait rw\0" \
 	"mmcautodetect=yes\0" \
-	"mmcargs=setenv bootargs console=${console},${baudrate} earlycon root=${mmcroot}\0 " \
-	"loadbootscript=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${script};\0" \
-	"bootscript=echo Running bootscript from mmc ...; " \
+	"root_opt=rootwait rw\0" \
+	"extra_opt=net.ifnames=0\0" \
+	"emmc_ul=setenv iface mmc; setenv dev 0; setenv part 1;" \
+	"setenv bootargs console=${console},${baudrate} ${earlycon} root=/dev/mmcblk0p2 ${root_opt} ${extra_opt};\0" \
+	"sd_ul=setenv iface mmc; setenv dev 1; setenv part 1;" \
+	"setenv bootargs console=${console},${baudrate} ${earlycon} root=/dev/mmcblk1p2 ${root_opt} ${extra_opt};\0" \
+	"usb_ul=usb start; setenv iface usb; setenv dev 0; setenv part 1;" \
+	"setenv bootargs console=${console},${baudrate} ${earlycon} root=/dev/sda2 ${root_opt} ${extra_opt};\0" \
+	"ulbootscript=load ${iface} ${dev}:${part} ${loadaddr} ${script};\0" \
+	"ulimage=load ${iface} ${dev}:${part} ${loadaddr} ${image}\0" \
+	"ulfdt=if test ${boot_fdt} = yes || test ${boot_fdt} = try; then " \
+		"load ${iface} ${dev}:${part} ${fdt_addr} ${fdt_file}; fi;\0" \
+	"bootscript=echo Running bootscript from ${iface} ...; " \
 		"source\0" \
-	"loadimage=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${image}\0" \
-	"loadfdt=fatload mmc ${mmcdev}:${mmcpart} ${fdt_addr} ${fdt_file}\0" \
 	"hdp_addr=0x9c000000\0" \
 	"hdprx_addr=0x9c800000\0" \
 	"hdp_file=hdmitxfw.bin\0" \
 	"hdprx_file=hdmirxfw.bin\0" \
-	"loadhdp=fatload mmc ${mmcdev}:${mmcpart} ${hdp_addr} ${hdp_file}\0" \
-	"loadhdprx=fatload mmc ${mmcdev}:${mmcpart} ${hdprx_addr} ${hdprx_file}\0" \
+	"ulhdp=load ${iface} ${dev}:${part} ${hdp_addr} ${hdp_file}\0" \
+	"ulhdprx=load ${iface} ${dev}:${part} ${hdprx_addr} ${hdprx_file}\0" \
 	"boot_os=booti ${loadaddr} - ${fdt_addr};\0" \
-	"loadcntr=fatload mmc ${mmcdev}:${mmcpart} ${cntr_addr} ${cntr_file}\0" \
+	"ulcntr=${iface} ${dev}:${part} ${cntr_addr} ${cntr_file}\0" \
 	"auth_os=auth_cntr ${cntr_addr}\0" \
 	"mmcboot=echo Booting from mmc ...; " \
 		"if run loadhdp; then; hdp load ${hdp_addr}; fi;" \
@@ -215,106 +171,68 @@
 				"echo wait for boot; " \
 			"fi;" \
 		"fi;\0" \
-	"netargs=setenv bootargs console=${console},${baudrate} earlycon " \
-		"root=/dev/nfs " \
-		"ip=dhcp nfsroot=${serverip}:${nfsroot},v3,tcp\0" \
-	"netboot=echo Booting from net ...; " \
-		"run netargs;  " \
-		"if test ${ip_dyn} = yes; then " \
-			"setenv get_cmd dhcp; " \
-		"else " \
-			"setenv get_cmd tftp; " \
-		"fi; " \
-		"if ${get_cmd} ${hdp_addr} ${hdp_file}; then; hdp load ${hdp_addr}; fi;" \
-		"if test ${sec_boot} = yes; then " \
-			"${get_cmd} ${cntr_addr} ${cntr_file}; " \
-			"if run auth_os; then " \
-				"run boot_os; " \
-			"else " \
-				"echo ERR: failed to authenticate; " \
-			"fi; " \
+
+#define CONFIG_BOOTCOMMAND \
+	"for src in sd_ul usb_ul emmc_ul; do " \
+		"run ${src}; " \
+		"if run ulbootscript; then " \
+			"run bootscript; " \
 		"else " \
-			"${get_cmd} ${loadaddr} ${image}; " \
-			"if test ${boot_fdt} = yes || test ${boot_fdt} = try; then " \
-				"if ${get_cmd} ${fdt_addr} ${fdt_file}; then " \
-					"run boot_os; " \
+			"if run ulimage; then " \
+				"if run ulfdt; then " \
+					"if run ulhdp; then; hdp load ${hdp_addr}; fi;" \
+					"run boot_os;"  \
 				"else " \
-					"echo WARN: Cannot load the DT; " \
+					"if test ${boot_fdt} != yes; then " \
+						"booti ${loadaddr}; " \
+					"fi; " \
 				"fi; " \
-			"else " \
-				"booti; " \
-			"fi;" \
-		"fi;\0"
+			"fi; " \
+		"fi; " \
+	"done; " \
+	"usb start; ums 1 mmc ${mmcdev};"
 
-#define CONFIG_BOOTCOMMAND \
-	   "mmc dev ${mmcdev}; if mmc rescan; then " \
-		   "if run loadbootscript; then " \
-			   "run bootscript; " \
-		   "else " \
-			   "if test ${sec_boot} = yes; then " \
-				   "if run loadcntr; then " \
-					   "run mmcboot; " \
-				   "else run netboot; " \
-				   "fi; " \
-			    "else " \
-				   "if run loadimage; then " \
-					   "run mmcboot; " \
-				   "else run netboot; " \
-				   "fi; " \
-			 "fi; " \
-		   "fi; " \
-	   "else booti ${loadaddr} - ${fdt_addr}; fi"
 
 /* Link Definitions */
-#define CONFIG_LOADADDR			0x80280000
+#define CONFIG_LOADADDR					0x80280000
 
-#define CONFIG_SYS_LOAD_ADDR           CONFIG_LOADADDR
+#define CONFIG_SYS_LOAD_ADDR				CONFIG_LOADADDR
 
-#define CONFIG_SYS_INIT_SP_ADDR         0x80200000
+#define CONFIG_SYS_INIT_SP_ADDR				0x80200000
 
 
-#ifdef CONFIG_QSPI_BOOT
-#define CONFIG_ENV_SECT_SIZE	(128 * 1024)
-#define CONFIG_ENV_SPI_BUS	CONFIG_SF_DEFAULT_BUS
-#define CONFIG_ENV_SPI_CS	CONFIG_SF_DEFAULT_CS
-#define CONFIG_ENV_SPI_MODE	CONFIG_SF_DEFAULT_MODE
-#define CONFIG_ENV_SPI_MAX_HZ	CONFIG_SF_DEFAULT_SPEED
-#else
-#define CONFIG_SYS_MMC_ENV_PART		0	/* user area */
-#endif
-
-#define CONFIG_SYS_MMC_IMG_LOAD_PART	1
+#define CONFIG_SYS_MMC_ENV_DEV				0 /* USDHC1 - eMMC */
+#define CONFIG_SYS_MMC_ENV_PART				1 /* eMMC Boot partition */
 
-/* On LPDDR4 board, USDHC1 is for eMMC, USDHC2 is for SD on CPU board */
-#define CONFIG_SYS_MMC_ENV_DEV		1   /* USDHC2 */
-#define CONFIG_MMCROOT			"/dev/mmcblk1p2"  /* USDHC2 */
-#define CONFIG_SYS_FSL_USDHC_NUM	2
+#define CONFIG_SYS_MMC_IMG_LOAD_PART			1 /* Kernel & dtb location */
+#define CONFIG_MMCROOT					"/dev/mmcblk0p2"  /* USDHC1 */
+#define CONFIG_SYS_FSL_USDHC_NUM			2
 
 /* Size of malloc() pool */
-#define CONFIG_SYS_MALLOC_LEN		((CONFIG_ENV_SIZE + (32 * 1024)) * 1024)
+#define CONFIG_SYS_MALLOC_LEN				((CONFIG_ENV_SIZE + (32 * 1024)) * 1024)
 
-#define CONFIG_SYS_SDRAM_BASE		0x80000000
-#define PHYS_SDRAM_1			0x80000000
-#define PHYS_SDRAM_1_SIZE		(SZ_2G)		/* 2 GB */
-#define PHYS_SDRAM_2			0x880000000
-#define PHYS_SDRAM_2_SIZE		(SZ_2G)		/* 6 GB */
+#define CONFIG_SYS_SDRAM_BASE				0x80000000
+#define PHYS_SDRAM_1					0x80000000
+#define PHYS_SDRAM_1_SIZE				(SZ_2G) /* 2 GB */
+#define PHYS_SDRAM_2					0x880000000
+#define PHYS_SDRAM_2_SIZE				(SZ_2G + SZ_4G) /* 6 GB */
 
-#define CONFIG_SYS_MEMTEST_START    0xA0000000
-#define CONFIG_SYS_MEMTEST_END      (CONFIG_SYS_MEMTEST_START + (PHYS_SDRAM_1_SIZE >> 2))
+#define CONFIG_SYS_MEMTEST_START			0xA0000000
+#define CONFIG_SYS_MEMTEST_END				(CONFIG_SYS_MEMTEST_START + (PHYS_SDRAM_1_SIZE >> 2))
 
 /* Serial */
-#define CONFIG_BAUDRATE			115200
+#define CONFIG_BAUDRATE					115200
 
 /* Monitor Command Prompt */
-#define CONFIG_SYS_PROMPT_HUSH_PS2     "> "
-#define CONFIG_SYS_CBSIZE              2048
-#define CONFIG_SYS_MAXARGS             64
+#define CONFIG_SYS_PROMPT_HUSH_PS2			"> "
+#define CONFIG_SYS_CBSIZE				2048
+#define CONFIG_SYS_MAXARGS				64
 #define CONFIG_SYS_BARGSIZE CONFIG_SYS_CBSIZE
-#define CONFIG_SYS_PBSIZE		(CONFIG_SYS_CBSIZE + \
-					sizeof(CONFIG_SYS_PROMPT) + 16)
+#define CONFIG_SYS_PBSIZE				(CONFIG_SYS_CBSIZE + \
+							sizeof(CONFIG_SYS_PROMPT) + 16)
 
 /* Generic Timer Definitions */
-#define COUNTER_FREQUENCY		8000000	/* 8MHz */
+#define COUNTER_FREQUENCY				8000000	/* 8MHz */
 
 #ifndef CONFIG_DM_PCA953X
 #define CONFIG_PCA953X
@@ -322,12 +240,11 @@
 #define CONFIG_CMD_PCA953X_INFO
 #endif
 
-/* MT35XU512ABA1G12 has only one Die, so QSPI0 B won't work */
 #ifdef CONFIG_FSL_FSPI
-#define FSL_FSPI_FLASH_SIZE		SZ_64M
-#define FSL_FSPI_FLASH_NUM		1
-#define FSPI0_BASE_ADDR			0x5d120000
-#define FSPI0_AMBA_BASE			0
+#define FSL_FSPI_FLASH_SIZE				SZ_64M
+#define FSL_FSPI_FLASH_NUM				1
+#define FSPI0_BASE_ADDR					0x5d120000
+#define FSPI0_AMBA_BASE					0
 #define CONFIG_SYS_FSL_FSPI_AHB
 #endif
 
@@ -335,19 +252,10 @@
 
 /* USB Config */
 #ifndef CONFIG_SPL_BUILD
-/*#define CONFIG_CMD_USB*/
-/*#define CONFIG_USB_STORAGE*/
 #define CONFIG_USBD_HS
-
-/*
-#define CONFIG_CMD_USB_MASS_STORAGE
-#define CONFIG_USB_GADGET_MASS_STORAGE
-#define CONFIG_USB_FUNCTION_MASS_STORAGE
-*/
-
 #endif
 
-#define CONFIG_USB_MAX_CONTROLLER_COUNT 2
+#define CONFIG_USB_MAX_CONTROLLER_COUNT			3
 
 /* USB OTG controller configs */
 #ifdef CONFIG_USB_EHCI_HCD
@@ -366,10 +274,4 @@
 #define CONFIG_VIDEO_BMP_LOGO
 #endif
 
-#if defined(CONFIG_ANDROID_SUPPORT)
-#include "imx8qm_mek_android.h"
-#elif defined (CONFIG_ANDROID_AUTO_SUPPORT)
-#include "imx8qm_mek_android_auto.h"
-#endif
-
 #endif /* __CL_SOM_IMX8MAX_H */
-- 
2.20.1

